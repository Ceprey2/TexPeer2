/**
 * Created by ?????? on 10.07.2015.
 * <p/>
 * Created by ?????? on 06.07.2015.
 */
/**
 * Created by ?????? on 06.07.2015.
 */

import sun.swing.SwingUtilities2;

import javax.swing.*;
import javax.swing.border.Border;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.*;
import java.security.KeyStore;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
//import java.io.File;

import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.Utilities;
import java.io.*;
import java.util.*;
import java.util.regex.*;
//import java.io.File;

//
//class MyFrame extends JFrame
//{
//
//    public MyFrame {
////        super("Concord 1.0");
////        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
////     //   setBounds(100, 100, 800, 800);
////        setSize(800, 300);
////        setVisible(true);
//
//    }


class Expression {
    public static String[][] MassivSovpadenij = new String[100][2];
    public static int[][] MassivAbsChastot = new int[100][1];
    public static int NomerSovpadenia = 0;
    public static int AmountOfWords = 1;
    public static int MaxAmountOfWords = 15;
    public static boolean Registr = true;
    public static boolean Joker = false;
    public static String Exrpession;
    public static boolean VFaileNaideno = false;
    public static String FilesArray[] = new String[100];
    public static int KilkFailivZVyrazom = 0;
    public static int KilkFailvRazom = 0;
    public static float Medium = 0;
    public static String[] sCombTemas = {"Todos los temas", "Filosofía", "Física", "Geología", "Historia", "Lingüística", "Literarios", "Medicina", "Politología", "Psicología", "Traducción", "Economía"};


    public static JComboBox combTemas = new JComboBox(sCombTemas);


    public static JPanel panel2 = new JPanel(new GridLayout(0, 1));

    public static boolean Reg = false;

    public static String address="";

    public static JFrame fr = new JFrame("Concord 1.0");

    public static JTabbedPane tabby = new JTabbedPane();

    public static JTextArea textArea = new JTextArea(20, 70);
    public static JTextArea textArea2 = new JTextArea(1, 20);


    public static char[] ExprCh = new char[100];
    //  public static Pattern pattern;

//    public static float GetStandardDeviation()//ETU FUNKTSIU ZAPUSKAT TOLKO POSLE "FIND EXPRESSION"
//    {
//        float StandardDeviation = 0;
//float SumaTmp=0;
//        float Dyspersia=0;
//
//        for (int i=0; i<KilkFailvRazom; i++) {
//         SumaTmp=  SumaTmp+ (((float)MassivAbsChastot[i][0]-Medium)*((float)MassivAbsChastot[i][0]-Medium));
//           // System.out.println((((float)MassivAbsChastot[i][0]-Medium)*((float)MassivAbsChastot[i][0]-Medium)));
//
//        }
//        Dyspersia=SumaTmp/(float)KilkFailvRazom;
//
//
//        StandardDeviation=Dyspersia/2;
//        for (int i =0;i<100;i++)
//        {
//           float x =  Dyspersia/StandardDeviation;
//
//            StandardDeviation=(x+StandardDeviation)/2;
//        }
//
//
//        return StandardDeviation;
//    }

    public static void PrintInWindow() {


        //  fr.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

//        JScrollPane scrollPane = new JScrollPane(textArea);
//        fr.getContentPane().add(scrollPane, BorderLayout.CENTER);

        //     fr.getContentPane().add(new JScrollPane(Expression.textArea2));

        //fr.setVisible(true);
        Expression.textArea.setText("");

        Expression.textArea.append("Usioho opratsiovano " + KilkFailvRazom + " failiv" + "\n");

        if (NomerSovpadenia > 30) fr.setExtendedState(JFrame.MAXIMIZED_BOTH);

        Expression.textArea.append("Znaideno " + Expression.NomerSovpadenia + " zbihiv " + Exrpession + " v " + KilkFailivZVyrazom + " failakh" + "\n");
        Medium = (float) Expression.NomerSovpadenia / (float) KilkFailvRazom;
        Expression.textArea.append("Serednia chastota na 10 000 sliv: " + Medium + "\n");
        //Expression.textArea.append("Serednie kvadratychne vidkhylennya: " + GetStandardDeviation() + "\n");
        for (int i = 0; i < 100; i++) {
            if (Expression.MassivSovpadenij[i][0] != null) {
                //fr.add(textArea);

                System.out.println(Expression.MassivSovpadenij[i][0]);

                textArea.append(Expression.MassivSovpadenij[i][0] + "             \\\\ " + Expression.MassivSovpadenij[i][1] + "\n");

            }
        }
        // fr.pack(); // eto dlia svorachivania ramki
        fr.setVisible(true);
        KilkFailivZVyrazom = 0;
    }


    public static void GetFilesArray() {

        File f1 = new File(address);

        System.out.println(f1.getAbsolutePath());
        address = f1.getAbsolutePath();
        if (Expression.combTemas.getSelectedItem() == "Todos los temas") address=address+ "\\Textovi faily"+ "\\Todos los temas\\";
        if (Expression.combTemas.getSelectedItem() == "Física") address=address+ "\\Textovi faily"+ "\\Física\\";
        File  f = new File(address);

        FilesArray = f.list();
        KilkFailvRazom = f.list().length;
        if (FilesArray.length > 100) JOptionPane.showMessageDialog(null, "Too many files");

        if (FilesArray.length == 0) JOptionPane.showMessageDialog(null, "Files not found");
//        System.out.println(FilesArray[0]);
//        System.out.println(FilesArray[1]);
//        System.out.println(FilesArray[2]);
//        System.out.println(FilesArray[3]);

    }


    public static void SetExpression(String Exprsn, boolean Reg) {
        Joker = false;
        if (!Reg) Expression.Registr = false;
        Expression.Exrpession = CleanExpression(Exprsn);
//        System.out.println(Exrpession.charAt(1) + " -symvol 2");
//        System.out.println(Expression.Exrpession);
        Expression.AmountOfWords = DefineAmount(Exrpession);
//        System.out.println(AmountOfWords);
        String Sub1 = Exrpession;
        for (int i = 0; i < Exrpession.length(); i++) {

            ExprCh[i] = Exrpession.charAt(i);
            if (ExprCh[i] == '*') {
                System.out.println(i);
                System.out.println(ExprCh[i]);

                Joker = true;
//       if (i==0)
//       {
//           Sub1 = '^'+Exrpession.substring(0,i)+'.'+Exrpession.substring(i,Exrpession.length());
//       }
//            else

                Sub1 = Sub1.substring(0, Sub1.length() - Exrpession.length() + i) + '.' + Sub1.substring(Sub1.length() - Exrpession.length() + i, Sub1.length());// Dobavliayem tochku dlia regex

                System.out.println("promezhut " + Sub1);

            }
        }

        Exrpession = Sub1;
        System.out.println(Exrpession);
        //System.out.println(AmountOfWords);

    }


    public static void FindExpr() throws IOException {
        VFaileNaideno = false;
        NomerSovpadenia = 0;
        MassivSovpadenij = new String[100][2];
        for (int I = 0; I < FilesArray.length; I++) {
            VFaileNaideno = false;
            String Adress = "";
            File f1 = new File(Adress);
            Adress = f1.getAbsolutePath();
            Scanner in = new Scanner(new File(Adress + "\\Textovi faily\\" + FilesArray[I]));
            //  System.out.println (Adress+"\\Textovi faily\\"+FilesArray[I]);
            String Word[] = new String[MaxAmountOfWords];
            String Expr = "";
            String PreviousExpr = "";

            int i = 0;
            for (; i < MaxAmountOfWords - 1; i++) {
                Word[i] = "%%%%%";// ZANESLI V STECK VSE SLOVA VYRAZHENIA MAXIMALNOI DLINY BEZ POSLEDNEGO
                //System.out.println(Word[i]);
            }
            int KilkVdannomFaile = 0;
            while (in.hasNext()) {

                //   System.out.println("Zashlo v fail"+Adress+"\\Textovi faily\\"+FilesArray[I]);
                if (in.hasNext())
                    Word[MaxAmountOfWords - 1] = in.next();// ZANESLI V STECK POSLEDNEE SLOVA VYRAZHENIA MAXIMALNOY DLINY
                //  System.out.println("Slovo "+Word[MaxAmountOfWords - 1] +" slovo" );

                //  System.out.println(Word[MaxAmountOfWords-1]);

                for (int m = 0; m < MaxAmountOfWords; m++) {
                    if ((m + Expression.AmountOfWords) >= MaxAmountOfWords) {
                        break;
                    }

                    for (int p = m; p < (Expression.AmountOfWords + m); p++) {

                        Expr = Expr + Word[p] + " "; // DOBAVILI POSLEDNIY ELEMENT V TEKUSHEE VYRAZHENIE

                    }
                    // System.out.println(Expr);
                    //Expr=CleanExpression(Expr);
                    //System.out.println(Expr+"!!!");

                    if (m == (MaxAmountOfWords - AmountOfWords) / 2) {

                        if (!Joker) {
                            if (CleanExpression(Expr).equals(Exrpession)) {
                                KilkVdannomFaile = getCountInTheCurrentFile(I, Word, KilkVdannomFaile);
                                VFaileNaideno = true;
                            }
                        } else {
                            Pattern p = Pattern.compile(Exrpession);

                            Matcher matcher = p.matcher(CleanExpression(Expr));

                            if (matcher.matches()) {
                                KilkVdannomFaile = getCountInTheCurrentFile(I, Word, KilkVdannomFaile);
                                VFaileNaideno = true;
                            }

                        }

                    }
                    Expr = "";

                }

                int s = 0;

                for (int r = 0; r < MaxAmountOfWords - 1; r++) {
                    Word[r] = Word[s + 1];
                    s++;
                }
                MassivAbsChastot[I][0] = KilkVdannomFaile;
            }
            if (VFaileNaideno) KilkFailivZVyrazom++;
            VFaileNaideno = false;
            in.close();
        }

    }

    private static int getCountInTheCurrentFile(int i, String[] word, int kilkVdannomFaile) {
        VFaileNaideno = true;

        String ExprTmp = "";
        for (int n = 0; n < MaxAmountOfWords; n++) {

            if (n == (MaxAmountOfWords - AmountOfWords) / 2)
                word[n] = word[n].toUpperCase();//PERVOE SLOVO ISKOMOGO VYRAZH V VERHNIY REGISTR

            ExprTmp = ExprTmp + word[n] + " ";
            //System.out.println("Proba: "+Expr);

        } // S
        MassivSovpadenij[NomerSovpadenia][0] = ExprTmp;
        MassivSovpadenij[NomerSovpadenia][1] = FilesArray[i];
        //   System.out.println("SOVPADENIE "+Expr);

        //  System.out.println(MassivSovpadenij[NomerSovpadenia]);
        NomerSovpadenia++;
        if (NomerSovpadenia >= 100) {
            System.out.println("Slishkom monogo sovpadeniy. Ogranichte poisk!");
            JOptionPane.showMessageDialog(null, "Забагато збігів (більше 100)! Обмежте пошук!");
            NomerSovpadenia = 0;
        }
        kilkVdannomFaile++;
        System.out.println(kilkVdannomFaile);
        return kilkVdannomFaile;
    }

    static String CleanExpression(String stroka) {

        if (!Registr) stroka = stroka.toLowerCase();

        String strTemp = "";
        int i = 0;
        if ((int) stroka.charAt(0) == 32) i = 1;//Proskakivaiem pervyi probel
        int k = 0; // SCHIOTCHIK DLIA CLEANED STRING
        for (; i < stroka.length(); i++) {

            if (i == stroka.length() - 1 && (((int) stroka.charAt(i) == 32)) || (stroka.charAt(i) == '\0') ||
                    ((stroka.charAt(i) == '.') && (stroka.charAt(i + 1) != '*')) || (stroka.charAt(i) == ',') ||
                    (stroka.charAt(i) == ':') || (stroka.charAt(i) == ';') || (stroka.charAt(i) == '-')) {
                break; // UBIRAEM POSLEDNIY SIMVOL, ESLI ETO PROBEL}
            }
            if ((int) stroka.charAt(i) != 32 || (int) stroka.charAt(i - 1) != 32) {
                strTemp = strTemp + stroka.charAt(i);
            }                            // UBIRAEM DVA PROBELA PODRIAD

        }
        //   char [] TempCleanedCh = new char [k];// opredeliaem realnyi razmer charov, bes musora, t.e., sokrashaem stroku

//int KolichestvoSlov=0;
//        for (int m =0; m<k; m++)
//        {
//            TempCleanedCh[m] = strTemp[m];
//            System.out.println(TempCleanedCh[m]);
//            //if (TempCleanedCh[m]==' ')
//              //  KolichestvoSlov++;
//        }
//
//
//        String CleanedStr = new String(TempCleanedCh);
//
//        // System.out.print ("Staraya:  " + i+ "NOVAYA: "+k+ "LENGTH: "+ CleanedStr.length());
//        // System.out.print ("CLEANED: " + CleanedStr+ "!!");

        return strTemp;
    }


    public static String[] GetAllWords() throws IOException {

        StringBuilder sb = new StringBuilder();
        for (String aFilesArray : FilesArray) {


            File f1 = new File(address);

            Scanner in = new Scanner(new File(address + aFilesArray));
            while (in.hasNextLine())
            {
                sb.append(in.nextLine());
                System.out.println("Appending");
            }

        }
        //        for (int i=0; i<1000;i++)
//        {
//            System.out.println(fileToArray[i]);
//        }
        return sb.toString().trim().split("[©“”‘—’–«»•№…¿·§\uFEFFС°\\p{Digit}\\p{Punct}\\p{Space}]+");
    }


    public static void getSortedWordsAndCount(JTextArea txtAr) throws IOException {

        TreeMap<String, Integer> wordsAndCount = new TreeMap<>();
        String[] fileToArray = GetAllWords();
        int index = 0;
        while (index < fileToArray.length) {
            if (wordsAndCount.containsKey(fileToArray[index])) {
                wordsAndCount.put(fileToArray[index], wordsAndCount.get(fileToArray[index]) + 1);
            } else {
                wordsAndCount.put(fileToArray[index], 1);
            }
            index++;
        }

        for (Map.Entry<String, Integer> wordCount : wordsAndCount.entrySet()) {
            // System.out.println(wordCount.getKey() + " " + wordCount.getValue());
            txtAr.append(wordCount.getKey() + " " + wordCount.getValue() + "\n");
        }
        //    System.out.println(System.currentTimeMillis() - startTime);


        txtAr.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getButton() != MouseEvent.BUTTON1) {

                    return;
                }
                if (e.getClickCount() != 2) {
                    return;
                }

                int offset = txtAr.viewToModel(e.getPoint());

                try {
                    int rowStart = Utilities.getRowStart(txtAr, offset);
                    int rowEnd = Utilities.getRowEnd(txtAr, offset);
                    String selectedLine = txtAr.getText().substring(rowStart, rowEnd);
                    System.out.println("selected line:" + selectedLine);
                    String word = selectedLine.split(" ")[0];
                    tabby.setSelectedIndex(0);
                    SetExpression(word, true);
                    try {
                        FindExpr();
                    } catch (IOException e1) {

                    }
                    Expression.PrintInWindow();


                } catch (BadLocationException e1) {
                    e1.printStackTrace();
                }

            }
        });

    }


    static int DefineAmount(String Expr) {
        int KolichestvoSlov = 1;
        for (int i = 0; i < Expr.length(); i++) {
            if (Expr.charAt(i) == ' ')
                KolichestvoSlov++;
        }
        //System.out.println(KolichestvoSlov);
        return KolichestvoSlov;
    }
}


public class ConcordancerFrame {
    public static void main(String[] args) throws IOException {
        Expression.fr.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        Expression.fr.setSize(900, 400);
        Expression.fr.setLocationRelativeTo(null);
        //   Expression.fr.setBounds(400, 200, 680, 420);
        Expression.fr.getContentPane().setBackground(Color.CYAN);
        ImageIcon img = new ImageIcon("icon2.jpg");
        Expression.fr.setIconImage(img.getImage());

        Expression.fr.setResizable(true);
        Expression.fr.setVisible(true);

        JPanel panel = new JPanel();
        JPanel mainpanel2 = new JPanel(new GridLayout(0, 1));
        JPanel mainpanelConc = new JPanel(new BorderLayout());
        JPanel panel1 = new JPanel(new GridBagLayout());
        JPanel panel2 = new JPanel(new GridLayout(0, 1));

        Expression.fr.add(panel);
        Expression.fr.add(mainpanel2);
        Expression.fr.add(mainpanelConc);
        //  Expression.fr.setSize(1200, 400);
        // panel.setSize(900, 400);
        panel1.setSize(200, 400);
        panel2.setSize(800, 400);


        panel.setLayout(new BoxLayout(panel, BoxLayout.X_AXIS));
        panel.add(panel1);
        panel.add(panel2);
        //  panel1.setLayout(new BoxLayout(panel1, BoxLayout.Y_AXIS));

        final JRadioButton ButtonReg = new JRadioButton("Враховувати регістр");

        GridBagConstraints c = new GridBagConstraints();
        c.gridx = 3;
        c.gridy = 0;
        ButtonReg.setBackground(Color.lightGray);
        panel1.add(ButtonReg, c);
        GridBagConstraints d = new GridBagConstraints();
        d.gridx = 3;
        d.gridy = 1;
        d.fill = 1;


        panel1.add(Expression.textArea2, d);
        panel1.add(Expression.combTemas);
        panel2.add(Expression.textArea);

        JScrollPane scroll = new JScrollPane(Expression.textArea);
        scroll.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        panel2.add(scroll);

        Expression.textArea2.setText("Введіть вираз для пошуку");

        Border border = BorderFactory.createLineBorder(Color.BLACK);
        Expression.textArea2.setBorder(border);
        // Expression.textArea2.setColumns(70);


        // Expression.textArea.setText("Введіть вираз для пошуку");
        Expression.textArea.setBackground(new Color(190, 200, 100));
//        Box box1 = new Box(BoxLayout.Y_AXIS);
//        box1.add(Box.createVerticalStrut(105));
//        box1.setBackground(Color.CYAN);
//        box1.setOpaque(true);

        GridBagConstraints e = new GridBagConstraints();
        e.gridx = 3;
        e.gridy = 2;
        // panel1.add(box1, e);
        final JButton butSearch = new JButton("Шукати");
        butSearch.setForeground(new Color(0, 0, 253));
        butSearch.setCursor(new Cursor(Cursor.HAND_CURSOR));
        GridBagConstraints f = new GridBagConstraints();
        f.gridx = 3;
        f.gridy = 2;
        panel1.add(butSearch, f);

        Expression.tabby.addTab("Concordances", panel);
        Expression.tabby.addTab("About", mainpanel2);
        Expression.tabby.addTab("List of Tokens", mainpanelConc);
        Expression.fr.add(Expression.tabby);

        panel1.setBackground(Color.lightGray);
        JTextArea textAbout = new JTextArea();
        textAbout.setLineWrap(true);
        textAbout.setWrapStyleWord(true); // eto dlia perenosa texta

        mainpanel2.add(textAbout); // eto dlia perenosa texta

        textAbout.append("Код: Фокін С.Б. і Іванов М.С." + "\n");
        textAbout.append("Вибірка текстів: Фокін С.Б., Іванов М.С., Бакаржиєва І., Бендерець О., " +
                "Бучака І., Ільїна О., Ісаєва М., Краснодзей В., Кладченко А., Лопатіна А., Мамукова К., Мудрик А., Демченко Л., Скиба В., " +
                "Ткачук О., Ярина Л.");


        JTextArea ConcordListt = new JTextArea(200, 20);
        ConcordListt.setBackground(new Color(170, 180, 255));
        GridBagConstraints textConc = new GridBagConstraints();
        textConc.gridx = 3;
        textConc.gridy = 3;
        textConc.fill = 6;
        mainpanelConc.add(ConcordListt, BorderLayout.NORTH);
        JScrollPane scrollPane = new JScrollPane(ConcordListt);
        scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        mainpanelConc.add(scrollPane);

        textAbout.setLineWrap(true);
        textAbout.setWrapStyleWord(true);


        JButton GetConc = new JButton("Retrieve concordance");
        GetConc.setBackground(new Color(170, 80, 10));
        GridBagConstraints retrButt = new GridBagConstraints();
        retrButt.gridx = 3;
        retrButt.gridy = 9;
        mainpanelConc.add(GetConc, BorderLayout.SOUTH);

        GetConc.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    Expression.getSortedWordsAndCount(ConcordListt);
                } catch (IOException ignored) {

                }
            }
        });


        // Expression.fr.setResizable(true);
        Expression.fr.setVisible(true);
        // String ExpressionToFind = JOptionPane.showInputDialog(null, Expression.panel, "Введіть вираз для пошуку");
        long startTime = System.currentTimeMillis();// DLIA IZMERENIA VREMENI DEISTVIA PROGRAMMY


        Expression.GetFilesArray();
        Expression.GetAllWords();


        //  if (ButtonReg.isSelected()) Expression.Reg = true;

        //   Expression.SetExpression(ExpressionToFind, Expression.Reg);
//System.out.println(Expression.CleanExpression("Y si ello es encantamento, como  ")+"@@");


        // Expression.FindExpr();//  MyFrame fr =  new MyFrame ("UuuuU");

        //  Expression.PrintInWindow();

        //   long timeSpent = System.currentTimeMillis() - startTime;
        //   System.out.println("Программа выполнялась " + timeSpent + " миллисекунд");


        butSearch.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {

                String ExpressionToFind = Expression.textArea2.getText();
                long startTime = System.currentTimeMillis();// DLIA IZMERENIA VREMENI DEISTVIA PROGRAMMY
                Expression.textArea.setText("");
                if (ButtonReg.isSelected()) Expression.Reg = true;

                Expression.SetExpression(ExpressionToFind, Expression.Reg);
//System.out.println(Expression.CleanExpression("Y si ello es encantamento, como  ")+"@@");

                try {
                    Expression.FindExpr();
                } catch (IOException ignored) {

                }

                //  MyFrame fr =  new MyFrame ("UuuuU");

                Expression.PrintInWindow();

                long timeSpent = System.currentTimeMillis() - startTime;
                System.out.println("Программа выполнялась " + timeSpent + " миллисекунд");

            }
        });
//        for (int i=0; i<100; i++)
//        {
//            if (Expression.MassivSovpadenij[i]!=null)
//            {
//                JTextArea textArea = new JTextArea(10, 700);
//                fr.add(textArea);
//
//                System.out.println("Sovpadenie: "+Expression.MassivSovpadenij[i]);
//            }
//        }

    }
}